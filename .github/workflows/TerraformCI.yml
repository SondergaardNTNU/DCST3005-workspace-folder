name: Terraform CI

on:
  pull_request:
    branches: 
      - main
    paths:
      - "module8/buildOnce-deployMany/simple-terraform/**"

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    environment: dev
    env:
      WORKDIR: "module8/buildOnce-deployMany/simple-terraform"
      BACKEND_HCL: "module8/buildOnce-deployMany/simple-terraform/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Terraform Format Check
        working-directory: ${{ env.WORKDIR }}/terraform
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}/terraform
        id: init
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/dev/dev.tfstate" \
            -input=false \
            -no-color
      
      - name: Terraform Validate
        working-directory: ${{ env.WORKDIR }}/terraform
        id: validate
        run: terraform validate -no-color

  plan-all-environments:
    name: Plan - ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ matrix.environment }}
    env:
      WORKDIR: "module8/buildOnce-deployMany/simple-terraform"
      BACKEND_HCL: "module8/buildOnce-deployMany/simple-terraform/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
    
    strategy:
      matrix:
        environment: [dev, test, prod]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false
      
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"
      
      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}/terraform
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=projects/storageaccount/${{ matrix.environment }}/${{ matrix.environment }}.tfstate" \
            -input=false \
            -no-color
      
      - name: Set Environment Variables
        run: |
          case "${{ matrix.environment }}" in
            dev)
              echo "ENVIRONMENT=dev" >> $GITHUB_ENV
              echo "LOCATION=norwayeast" >> $GITHUB_ENV
              echo "PROJECT_NAME=demo" >> $GITHUB_ENV
              ;;
            test)
              echo "ENVIRONMENT=test" >> $GITHUB_ENV
              echo "LOCATION=norwayeast" >> $GITHUB_ENV
              echo "PROJECT_NAME=demo" >> $GITHUB_ENV
              ;;
            prod)
              echo "ENVIRONMENT=prod" >> $GITHUB_ENV
              echo "LOCATION=norwayeast" >> $GITHUB_ENV
              echo "PROJECT_NAME=demo" >> $GITHUB_ENV
              ;;
          esac
      
      - name: Terraform Plan
        working-directory: ${{ env.WORKDIR }}/terraform
        id: plan
        run: |
          # Kj√∏r plan og fang b√•de stdout og stderr
          set +e  # Ikke stopp ved feil
          terraform plan -no-color \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="location=${{ env.LOCATION }}" \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -out=${{ matrix.environment }}.tfplan 2>&1 | tee plan-output.txt
          
          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          set -e
          
          # Lagre output og exit code
          {
            echo "PLAN_EXIT_CODE=${PLAN_EXIT_CODE}"
            echo 'PLAN_OUTPUT<<EOF'
            cat plan-output.txt
            echo 'EOF'
          } >> "$GITHUB_ENV"
          
          exit ${PLAN_EXIT_CODE}
        continue-on-error: true
      
      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = process.env.PLAN_OUTPUT || 'No plan output available';
            const exitCode = process.env.PLAN_EXIT_CODE || 'unknown';
            const status = exitCode === '0' ? '‚úÖ Success' : '‚ùå Failed';
            
            const output = `#### Terraform Plan for \`${{ matrix.environment }}\` üìã ${status}
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${planOutput}
            \`\`\`
            
            </details>
            
            **Exit Code:** ${exitCode}
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
