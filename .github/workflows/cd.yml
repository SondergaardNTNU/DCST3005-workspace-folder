name: Oblig2 Terraform CD

on:
  push:
    branches:
      - main
    paths:
      - "module9/buildOnce-deployMany/terraform/**"

permissions:
  id-token: write
  contents: read

jobs:
  deploy-dev:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    environment: dev
    env:
      WORKDIR: "module9/buildOnce-deployMany/terraform"
      BACKEND_HCL: "module9/buildOnce-deployMany/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      ENVIRONMENT: "dev"
      LOCATION: "norwayeast"
      PROJECT_NAME: "shs"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=oblig2/${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}.tfstate" \
            -input=false \
            -no-color

      - name: Prepare environment tfvars (repo or secrets)
        run: |
          set -euo pipefail
          TFVARS_PATH="module9/buildOnce-deployMany/environments/${{ env.ENVIRONMENT }}.tfvars"
          if [ -f "$TFVARS_PATH" ]; then
            echo "Using committed var-file: $TFVARS_PATH"
            echo "TFVARS_FILE=$TFVARS_PATH" >> $GITHUB_ENV
          else
            TMPFILE=$(mktemp)
            umask 077
            case "${{ env.ENVIRONMENT }}" in
              dev)
                printf '%s\n' "${{ secrets.DEV_TFVARS }}" > "$TMPFILE"
                ;;
              test)
                printf '%s\n' "${{ secrets.TEST_TFVARS }}" > "$TMPFILE"
                ;;
              prod)
                printf '%s\n' "${{ secrets.PROD_TFVARS }}" > "$TMPFILE"
                ;;
              *)
                echo "No tfvars available for environment: ${{ env.ENVIRONMENT }}" >&2
                exit 1
                ;;
            esac
            if [ ! -s "$TMPFILE" ]; then
              echo "No tfvars content found in secrets for '${{ env.ENVIRONMENT }}'" >&2
              exit 1
            fi
            echo "TFVARS_FILE=$TMPFILE" >> $GITHUB_ENV
          fi

      - name: 🔍 Debug tfvars file
        if: always()
        run: |
          echo "----- TFVARS FILE CONTENT -----"
          if [ -f "$TFVARS_FILE" ]; then
            sed -E 's/(owner\s*=\s*").*(")/\1***REDACTED***\2/' "$TFVARS_FILE"
          else
            echo "❌ TFVARS_FILE not found"
          fi
          echo "--------------------------------"

      - name: Terraform Plan and Apply
        working-directory: ${{ env.WORKDIR }}
        run: |
          if [ -z "${TFVARS_FILE:-}" ]; then
            echo "TFVARS_FILE is not set" >&2
            exit 1
          fi
          echo "TFVARS_FILE present: $TFVARS_FILE"
          echo -n "TFVARS file size (bytes): " && wc -c < "$TFVARS_FILE" || true

          terraform plan -var-file="$TFVARS_FILE" -no-color -out=tfplan
          terraform show -no-color tfplan || true
          terraform apply -auto-approve tfplan

      - name: Cleanup temp tfvars
        if: always()
        run: |
          if [ -n "${TFVARS_FILE:-}" ] && [[ "$TFVARS_FILE" == /tmp/* ]]; then
            rm -f "$TFVARS_FILE" || true
          fi
          rm -f tfplan || true

      - name: Terraform Output
        working-directory: ${{ env.WORKDIR }}
        id: output
        run: |
          echo "### Terraform Outputs for DEV" >> $GITHUB_STEP_SUMMARY
          terraform output -no-color | tee -a $GITHUB_STEP_SUMMARY


  deploy-test:
    name: Deploy to TEST
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: test
    env:
      WORKDIR: "module9/buildOnce-deployMany/terraform"
      BACKEND_HCL: "module9/buildOnce-deployMany/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      ENVIRONMENT: "test"
      LOCATION: "norwayeast"
      PROJECT_NAME: "shs"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=oblig2/${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}.tfstate" \
            -input=false \
            -no-color

      - name: Terraform Plan and Apply
        working-directory: ${{ env.WORKDIR }}
        run: |
          if [ -z "${TFVARS_FILE:-}" ]; then
            echo "TFVARS_FILE is not set" >&2
            exit 1
          fi
          echo "TFVARS_FILE present: $TFVARS_FILE"
          echo -n "TFVARS file size (bytes): " && wc -c < "$TFVARS_FILE" || true

          terraform plan -var-file="$TFVARS_FILE" -no-color -out=tfplan
          terraform show -no-color tfplan || true
          terraform apply -auto-approve tfplan

      - name: Cleanup temp tfvars
        if: always()
        run: |
          if [ -n "${TFVARS_FILE:-}" ] && [[ "$TFVARS_FILE" == /tmp/* ]]; then
            rm -f "$TFVARS_FILE" || true
          fi
          rm -f tfplan || true

      - name: Terraform Output
        working-directory: ${{ env.WORKDIR }}
        id: output
        run: |
          echo "### Terraform Outputs for TEST" >> $GITHUB_STEP_SUMMARY
          terraform output -no-color | tee -a $GITHUB_STEP_SUMMARY


  deploy-prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: deploy-test
    environment: prod
    env:
      WORKDIR: "module9/buildOnce-deployMany/terraform"
      BACKEND_HCL: "module9/buildOnce-deployMany/shared/backend.hcl"
      TF_INPUT: "false"
      TF_IN_AUTOMATION: "true"
      ENVIRONMENT: "prod"
      LOCATION: "norwayeast"
      PROJECT_NAME: "shs"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3
          terraform_wrapper: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export ARM_* for Terraform (OIDC)
        run: |
          {
            echo "ARM_USE_OIDC=true"
            echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
            echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
            echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          } >> "$GITHUB_ENV"

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }}
        run: |
          terraform init \
            -backend-config="${{ github.workspace }}/${{ env.BACKEND_HCL }}" \
            -backend-config="key=oblig2/${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}.tfstate" \
            -input=false \
            -no-color

      - name: Terraform Plan and Apply
        working-directory: ${{ env.WORKDIR }}
        run: |
          if [ -z "${TFVARS_FILE:-}" ]; then
            echo "TFVARS_FILE is not set" >&2
            exit 1
          fi
          echo "TFVARS_FILE present: $TFVARS_FILE"
          echo -n "TFVARS file size (bytes): " && wc -c < "$TFVARS_FILE" || true

          terraform plan -var-file="$TFVARS_FILE" -no-color -out=tfplan
          terraform show -no-color tfplan || true
          terraform apply -auto-approve tfplan

      - name: Cleanup temp tfvars
        if: always()
        run: |
          if [ -n "${TFVARS_FILE:-}" ] && [[ "$TFVARS_FILE" == /tmp/* ]]; then
            rm -f "$TFVARS_FILE" || true
          fi
          rm -f tfplan || true

      - name: Terraform Output
        working-directory: ${{ env.WORKDIR }}
        id: output
        run: |
          echo "### Terraform Outputs for PROD" >> $GITHUB_STEP_SUMMARY
          terraform output -no-color | tee -a $GITHUB_STEP_SUMMARY

      - name: Deployment Summary
        run: |
          echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All environments have been successfully deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ DEV" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TEST" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PROD" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Same Terraform code deployed to all environments!**" >> $GITHUB_STEP_SUMMARY
